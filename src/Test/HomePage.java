/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Test;
import MyLibs.Doctor;
import java.awt.Graphics;  
import java.util.ArrayList;
 import java.awt.Image;  
 import java.awt.Toolkit;  
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
 import javax.swing.JPanel;  
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author Brey
 */
public class HomePage extends javax.swing.JFrame implements FormCommand{

    /**
     * Creates new form HomePage
     */
    remoteForm openform = new remoteForm();
    
    
    public HomePage() {
        initComponents();
        ImageIcon icon = new ImageIcon("C:\\Users\\AUBREY MARIE\\Desktop\\New folder (2)\\CodePrototype_Final_withDB_WithUI\\src\\images\\icons.png");
        this.setIconImage(icon.getImage());
      //  setExtendedState(MAXIMIZED_BOTH);
      
      // this.setSize(1350,880);
      Toolkit tk = Toolkit.getDefaultToolkit();
 //   int xsize = (int) tk.getScreenSize().getWidth();
   // int ysize = (int) tk.getScreenSize().getHeight();
 //  this.setSize(xsize,ysize);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        delete = new javax.swing.JButton();
        addDocButton = new javax.swing.JButton();
        EarningsButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        SearchTable = new javax.swing.JTable();
        LogOut = new javax.swing.JButton();
        SearchSpecialization = new javax.swing.JComboBox<>();
        SearchRate = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        searchs = new javax.swing.JButton();
        ConsultButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        delete.setFont(new java.awt.Font("Palatino Linotype", 0, 12)); // NOI18N
        delete.setText("DELETE RECORD");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });
        getContentPane().add(delete, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 340, 150, 50));

        addDocButton.setFont(new java.awt.Font("Palatino Linotype", 0, 12)); // NOI18N
        addDocButton.setText("ADD DOCTOR");
        addDocButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDocButtonActionPerformed(evt);
            }
        });
        getContentPane().add(addDocButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 340, 130, 50));

        EarningsButton.setFont(new java.awt.Font("Palatino Linotype", 0, 12)); // NOI18N
        EarningsButton.setText("DISPLAY RECORDS");
        EarningsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EarningsButtonActionPerformed(evt);
            }
        });
        getContentPane().add(EarningsButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 340, 160, 50));

        SearchTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Doctor", "Specialization", "Rate", "Day", "Time"
            }
        ));
        jScrollPane2.setViewportView(SearchTable);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, 750, 200));

        LogOut.setFont(new java.awt.Font("Palatino Linotype", 0, 12)); // NOI18N
        LogOut.setText("LOG OUT");
        LogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogOutActionPerformed(evt);
            }
        });
        getContentPane().add(LogOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 360, 100, 40));

        SearchSpecialization.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All Doctors", "Dermatologist", "Uronologist", "Pediatrician", "Cardiologist" }));
        SearchSpecialization.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchSpecializationActionPerformed(evt);
            }
        });
        getContentPane().add(SearchSpecialization, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 60, 190, -1));

        SearchRate.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Any Rate", "Less than 500", "501 to 1000", "Greater than 1000" }));
        getContentPane().add(SearchRate, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 60, 150, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cs project logo.png"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 180, 70));

        searchs.setText("Search");
        searchs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchsActionPerformed(evt);
            }
        });
        getContentPane().add(searchs, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 50, 90, 40));

        ConsultButton1.setFont(new java.awt.Font("Palatino Linotype", 0, 12)); // NOI18N
        ConsultButton1.setText("CONSULATION FORM");
        ConsultButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConsultButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(ConsultButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 340, 190, 50));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Proj_background.png"))); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 410));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void EarningsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EarningsButtonActionPerformed
        // TODO add your handling code here:
        openform.setCommand(new ShowEarnings());
       this.setVisible(false);   
    }//GEN-LAST:event_EarningsButtonActionPerformed

    private void addDocButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDocButtonActionPerformed

       openform.setCommand(new AddDoctorPage());
      
        this.setVisible(false);
 
    }//GEN-LAST:event_addDocButtonActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        
        openform.setCommand(new DeleteForm());
        this.setVisible(false);
        
    }//GEN-LAST:event_deleteActionPerformed

    private void LogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogOutActionPerformed
        // TODO add your handling code here:

        LogInPage login = new LogInPage();

        login.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        //login.setSize(800, 600);
        login.setVisible(true);
        login.setLocationRelativeTo(null);

        login.setVisible(true);
        this.setVisible(false);
        // this.dispatchEvent(new HomePage(this, HomePage.WINDOW_CLOSING));
    }//GEN-LAST:event_LogOutActionPerformed

    private void SearchSpecializationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchSpecializationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SearchSpecializationActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        showDoctorRecs();
    }//GEN-LAST:event_formWindowOpened

    private void searchsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchsActionPerformed
        // TODO add your handling code here:
        ArrayList<Doctor> doctorhome =new ArrayList<Doctor>();
    
        if(SearchSpecialization.getSelectedIndex() == 0 && SearchRate.getSelectedIndex() == 0){
        try{
            String URL = "jdbc:mysql://localhost:3306/doctorquery";
            String USER = "root";
            String PASS = "password";
            DefaultTableModel model;
            model=(DefaultTableModel) SearchTable.getModel();
            model.setRowCount(0);
            Connection conns = DriverManager.getConnection(URL, USER, PASS);
       PreparedStatement statementss = conns.prepareStatement("SELECT Doctor_NAME,Specialization_Name,Sched_DayFrom,Sched_DayTo, Sched_TimeFrom, Sched_TimeTo, Rate_Pay FROM Doctor, Specialization  WHERE Doctor.Specialization_ID = Specialization.Specialization_ID;");
            ResultSet results = statementss.executeQuery();
            
            while(results.next()){
                String name = results.getString(1);
                String spec = results.getString(2);
                //String rate =results.getString(4);
                String days = results.getString(3) + " - " + results.getString(4);
                String times = results.getString(5) + " - " + results.getString(6);
                String rate = results.getString(7);
             //   String rate = "??";
              //  System.out.println(name + spec + days + times + days + rate + "\n");
                doctorhome.add(new Doctor(name,spec,rate,days,times));
            } 
            for(Doctor ds:doctorhome){
            model.addRow(new Object[]{ds.docname,ds.special, ds.rate, ds.day, ds.time});  
            }
        }
        catch(SQLException sex)
	{
            System.out.println(sex.getMessage());
	}
    }
        else if(SearchSpecialization.getSelectedIndex() == 1 && SearchRate.getSelectedIndex() == 0){
        try{
            String URL = "jdbc:mysql://localhost:3306/doctorquery";
            String USER = "root";
            String PASS = "password";
            DefaultTableModel model;
            model=(DefaultTableModel) SearchTable.getModel();
            model.setRowCount(0);
            Connection conns = DriverManager.getConnection(URL, USER, PASS);
       PreparedStatement statementss = conns.prepareStatement("SELECT Doctor_NAME,Specialization_Name,Sched_DayFrom,Sched_DayTo, Sched_TimeFrom, Sched_TimeTo, Rate_Pay FROM Doctor, Specialization WHERE Doctor.Specialization_ID = Specialization.Specialization_ID AND Doctor.Specialization_ID = 3 AND Rate_Pay < 500");
            ResultSet results = statementss.executeQuery();
            
            while(results.next()){
                String name = results.getString(1);
                String spec = results.getString(2);
                //String rate =results.getString(4);
                String days = results.getString(3) + " - " + results.getString(4);
                String times = results.getString(5) + " - " + results.getString(6);
                String rate = results.getString(7);
            //    String rate = "??";
             //   System.out.println(name + spec + days + times + days + rate + "\n");
                doctorhome.add(new Doctor(name,spec,rate,days,times));
            } 
            for(Doctor ds:doctorhome){
            model.addRow(new Object[]{ds.docname,ds.special, ds.rate, ds.day, ds.time});  
            }
        }
        catch(SQLException sex)
	{
            System.out.println(sex.getMessage());
	}
    }
    
    else if(SearchSpecialization.getSelectedIndex() == 2 && SearchRate.getSelectedIndex() == 0){
        try{
            String URL = "jdbc:mysql://localhost:3306/doctorquery";
            String USER = "root";
            String PASS = "password";
            DefaultTableModel model;
            model=(DefaultTableModel) SearchTable.getModel();
            model.setRowCount(0);
            Connection conns = DriverManager.getConnection(URL, USER, PASS);
       PreparedStatement statementss = conns.prepareStatement("SELECT Doctor_NAME,Specialization_Name,Sched_DayFrom,Sched_DayTo, Sched_TimeFrom, Sched_TimeTo, Rate_Pay FROM Doctor, Specialization  WHERE Doctor.Specialization_ID = Specialization.Specialization_ID AND Doctor.Specialization_ID = 2;");
            ResultSet results = statementss.executeQuery();
            
            while(results.next()){
                String name = results.getString(1);
                String spec = results.getString(2);
                //String rate =results.getString(4);
                String days = results.getString(3) + " - " + results.getString(4);
                String times = results.getString(5) + " - " + results.getString(6);
                String rate = results.getString(7);
               // String rate = "??";
            //    System.out.println(name + spec + days + times + days + rate + "\n");
                doctorhome.add(new Doctor(name,spec,rate,days,times));
            } 
            for(Doctor ds:doctorhome){
            model.addRow(new Object[]{ds.docname,ds.special, ds.rate, ds.day, ds.time});  
            }
        }
        catch(SQLException sex)
	{
            System.out.println(sex.getMessage());
	}
    }
    
    else if(SearchSpecialization.getSelectedIndex() == 3 && SearchRate.getSelectedIndex() == 0){
        try{
            String URL = "jdbc:mysql://localhost:3306/doctorquery";
            String USER = "root";
            String PASS = "password";
            DefaultTableModel model;
            model=(DefaultTableModel) SearchTable.getModel();
            model.setRowCount(0);
            Connection conns = DriverManager.getConnection(URL, USER, PASS);
       PreparedStatement statementss = conns.prepareStatement("SELECT Doctor_NAME,Specialization_Name,Sched_DayFrom,Sched_DayTo, Sched_TimeFrom, Sched_TimeTo, Rate_Pay FROM Doctor, Specialization  WHERE Doctor.Specialization_ID = Specialization.Specialization_ID AND Doctor.Specialization_ID = 4;");
            ResultSet results = statementss.executeQuery();
            
            while(results.next()){
                String name = results.getString(1);
                String spec = results.getString(2);
                //String rate =results.getString(4);
                String days = results.getString(3) + " - " + results.getString(4);
                String times = results.getString(5) + " - " + results.getString(6);
                String rate = results.getString(7);
               // String rate = "??";
           //     System.out.println(name + spec + days + times + days + rate + "\n");
                doctorhome.add(new Doctor(name,spec,rate,days,times));
            } 
            for(Doctor ds:doctorhome){
            model.addRow(new Object[]{ds.docname,ds.special, ds.rate, ds.day, ds.time});  
            }
        }
        catch(SQLException sex)
	{
            System.out.println(sex.getMessage());
	}
    }
    
    
    else if(SearchSpecialization.getSelectedIndex() == 4 && SearchRate.getSelectedIndex() == 0){
        try{
            String URL = "jdbc:mysql://localhost:3306/doctorquery";
            String USER = "root";
            String PASS = "password";
            DefaultTableModel model;
            model=(DefaultTableModel) SearchTable.getModel();
            model.setRowCount(0);
            Connection conns = DriverManager.getConnection(URL, USER, PASS);
       PreparedStatement statementss = conns.prepareStatement("SELECT Doctor_NAME,Specialization_Name,Sched_DayFrom,Sched_DayTo, Sched_TimeFrom, Sched_TimeTo, Rate_Pay FROM Doctor, Specialization  WHERE Doctor.Specialization_ID = Specialization.Specialization_ID AND Doctor.Specialization_ID = 1;");
            ResultSet results = statementss.executeQuery();
            
            while(results.next()){
                String name = results.getString(1);
                String spec = results.getString(2);
                
                String days = results.getString(3) + " - " + results.getString(4);
                String times = results.getString(5) + " - " + results.getString(6);
                String rate = results.getString(7);
                //String rate = "??";
           //     System.out.println(name + spec + days + times + days + rate + "\n");
                doctorhome.add(new Doctor(name,spec,rate,days,times));
            } 
            for(Doctor ds:doctorhome){
            model.addRow(new Object[]{ds.docname,ds.special, ds.rate, ds.day, ds.time});  
            }
        }
        catch(SQLException sex)
	{
            System.out.println(sex.getMessage());
	}
    }
    
        
        
        // Less than 500
        
        if(SearchSpecialization.getSelectedIndex() == 0 && SearchRate.getSelectedIndex() == 1){
        try{
            String URL = "jdbc:mysql://localhost:3306/doctorquery";
            String USER = "root";
            String PASS = "password";
            DefaultTableModel model;
            model=(DefaultTableModel) SearchTable.getModel();
            model.setRowCount(0);
            Connection conns = DriverManager.getConnection(URL, USER, PASS);
       PreparedStatement statementss = conns.prepareStatement("SELECT Doctor_NAME,Specialization_Name,Sched_DayFrom,Sched_DayTo, Sched_TimeFrom, Sched_TimeTo, Rate_Pay FROM Doctor, Specialization  WHERE Doctor.Specialization_ID = Specialization.Specialization_ID AND Rate_Pay < 500;");
            ResultSet results = statementss.executeQuery();
            
            while(results.next()){
                String name = results.getString(1);
                String spec = results.getString(2);
                //String rate =results.getString(4);
                String days = results.getString(3) + " - " + results.getString(4);
                String times = results.getString(5) + " - " + results.getString(6);
                String rate = results.getString(7);
             //   String rate = "??";
          //      System.out.println(name + spec + days + times + days + rate + "\n");
                doctorhome.add(new Doctor(name,spec,rate,days,times));
            } 
            for(Doctor ds:doctorhome){
            model.addRow(new Object[]{ds.docname,ds.special, ds.rate, ds.day, ds.time});  
            }
        }
        catch(SQLException sex)
	{
            System.out.println(sex.getMessage());
	}
    }
        else if(SearchSpecialization.getSelectedIndex() == 1 && SearchRate.getSelectedIndex() == 1){
        try{
            String URL = "jdbc:mysql://localhost:3306/doctorquery";
            String USER = "root";
            String PASS = "password";
            DefaultTableModel model;
            model=(DefaultTableModel) SearchTable.getModel();
            model.setRowCount(0);
            Connection conns = DriverManager.getConnection(URL, USER, PASS);
       PreparedStatement statementss = conns.prepareStatement("SELECT Doctor_NAME,Specialization_Name,Sched_DayFrom,Sched_DayTo, Sched_TimeFrom, Sched_TimeTo, Rate_Pay FROM Doctor, Specialization WHERE Doctor.Specialization_ID = Specialization.Specialization_ID AND Doctor.Specialization_ID = 3 AND Rate_Pay < 500");
            ResultSet results = statementss.executeQuery();
            
            while(results.next()){
                String name = results.getString(1);
                String spec = results.getString(2);
                //String rate =results.getString(4);
                String days = results.getString(3) + " - " + results.getString(4);
                String times = results.getString(5) + " - " + results.getString(6);
                String rate = results.getString(7);
            //    String rate = "??";
              //  System.out.println(name + spec + days + times + days + rate + "\n");
                doctorhome.add(new Doctor(name,spec,rate,days,times));
            } 
            for(Doctor ds:doctorhome){
            model.addRow(new Object[]{ds.docname,ds.special, ds.rate, ds.day, ds.time});  
            }
        }
        catch(SQLException sex)
	{
            System.out.println(sex.getMessage());
	}
    }
    
    else if(SearchSpecialization.getSelectedIndex() == 2 && SearchRate.getSelectedIndex() == 1){
        try{
            String URL = "jdbc:mysql://localhost:3306/doctorquery";
            String USER = "root";
            String PASS = "password";
            DefaultTableModel model;
            model=(DefaultTableModel) SearchTable.getModel();
            model.setRowCount(0);
            Connection conns = DriverManager.getConnection(URL, USER, PASS);
       PreparedStatement statementss = conns.prepareStatement("SELECT Doctor_NAME,Specialization_Name,Sched_DayFrom,Sched_DayTo, Sched_TimeFrom, Sched_TimeTo, Rate_Pay FROM Doctor, Specialization  WHERE Doctor.Specialization_ID = Specialization.Specialization_ID AND Doctor.Specialization_ID = 2 AND Rate_Pay < 500");
            ResultSet results = statementss.executeQuery();
            
            while(results.next()){
                String name = results.getString(1);
                String spec = results.getString(2);
                //String rate =results.getString(4);
                String days = results.getString(3) + " - " + results.getString(4);
                String times = results.getString(5) + " - " + results.getString(6);
                String rate = results.getString(7);
               // String rate = "??";
           //     System.out.println(name + spec + days + times + days + rate + "\n");
                doctorhome.add(new Doctor(name,spec,rate,days,times));
            } 
            for(Doctor ds:doctorhome){
            model.addRow(new Object[]{ds.docname,ds.special, ds.rate, ds.day, ds.time});  
            }
        }
        catch(SQLException sex)
	{
            System.out.println(sex.getMessage());
	}
    }
    
    else if(SearchSpecialization.getSelectedIndex() == 3 && SearchRate.getSelectedIndex() == 1){
        try{
            String URL = "jdbc:mysql://localhost:3306/doctorquery";
            String USER = "root";
            String PASS = "password";
            DefaultTableModel model;
            model=(DefaultTableModel) SearchTable.getModel();
            model.setRowCount(0);
            Connection conns = DriverManager.getConnection(URL, USER, PASS);
       PreparedStatement statementss = conns.prepareStatement("SELECT Doctor_NAME,Specialization_Name,Sched_DayFrom,Sched_DayTo, Sched_TimeFrom, Sched_TimeTo, Rate_Pay FROM Doctor, Specialization  WHERE Doctor.Specialization_ID = Specialization.Specialization_ID AND Doctor.Specialization_ID = 4 AND Rate_Pay < 500");
            ResultSet results = statementss.executeQuery();
            
            while(results.next()){
                String name = results.getString(1);
                String spec = results.getString(2);
                //String rate =results.getString(4);
                String days = results.getString(3) + " - " + results.getString(4);
                String times = results.getString(5) + " - " + results.getString(6);
                String rate = results.getString(7);
               // String rate = "??";
           //     System.out.println(name + spec + days + times + days + rate + "\n");
                doctorhome.add(new Doctor(name,spec,rate,days,times));
            } 
            for(Doctor ds:doctorhome){
            model.addRow(new Object[]{ds.docname,ds.special, ds.rate, ds.day, ds.time});  
            }
        }
        catch(SQLException sex)
	{
            System.out.println(sex.getMessage());
	}
    }
    
    
    else if(SearchSpecialization.getSelectedIndex() == 4 && SearchRate.getSelectedIndex() == 1){
        try{
            String URL = "jdbc:mysql://localhost:3306/doctorquery";
            String USER = "root";
            String PASS = "password";
            DefaultTableModel model;
            model=(DefaultTableModel) SearchTable.getModel();
            model.setRowCount(0);
            Connection conns = DriverManager.getConnection(URL, USER, PASS);
       PreparedStatement statementss = conns.prepareStatement("SELECT Doctor_NAME,Specialization_Name,Sched_DayFrom,Sched_DayTo, Sched_TimeFrom, Sched_TimeTo, Rate_Pay FROM Doctor, Specialization  WHERE Doctor.Specialization_ID = Specialization.Specialization_ID AND Doctor.Specialization_ID = 1 AND Rate_Pay < 500;");
            ResultSet results = statementss.executeQuery();
            
            while(results.next()){
                String name = results.getString(1);
                String spec = results.getString(2);
                
                String days = results.getString(3) + " - " + results.getString(4);
                String times = results.getString(5) + " - " + results.getString(6);
                String rate = results.getString(7);
                //String rate = "??";
            //    System.out.println(name + spec + days + times + days + rate + "\n");
                doctorhome.add(new Doctor(name,spec,rate,days,times));
            } 
            for(Doctor ds:doctorhome){
            model.addRow(new Object[]{ds.docname,ds.special, ds.rate, ds.day, ds.time});  
            }
        }
        catch(SQLException sex)
	{
            System.out.println(sex.getMessage());
	}
    }
    
        
        // 501 - 1000
        if(SearchSpecialization.getSelectedIndex() == 0 && SearchRate.getSelectedIndex() == 2){
        try{
            String URL = "jdbc:mysql://localhost:3306/doctorquery";
            String USER = "root";
            String PASS = "password";
            DefaultTableModel model;
            model=(DefaultTableModel) SearchTable.getModel();
            model.setRowCount(0);
            Connection conns = DriverManager.getConnection(URL, USER, PASS);
       PreparedStatement statementss = conns.prepareStatement("SELECT Doctor_NAME,Specialization_Name,Sched_DayFrom,Sched_DayTo, Sched_TimeFrom, Sched_TimeTo, Rate_Pay FROM Doctor, Specialization  WHERE Doctor.Specialization_ID = Specialization.Specialization_ID AND Rate_Pay BETWEEN 500 AND 1000;");
            ResultSet results = statementss.executeQuery();
            
            while(results.next()){
                String name = results.getString(1);
                String spec = results.getString(2);
                //String rate =results.getString(4);
                String days = results.getString(3) + " - " + results.getString(4);
                String times = results.getString(5) + " - " + results.getString(6);
                String rate = results.getString(7);
             //   String rate = "??";
           //     System.out.println(name + spec + days + times + days + rate + "\n");
                doctorhome.add(new Doctor(name,spec,rate,days,times));
            } 
            for(Doctor ds:doctorhome){
            model.addRow(new Object[]{ds.docname,ds.special, ds.rate, ds.day, ds.time});  
            }
        }
        catch(SQLException sex)
	{
            System.out.println(sex.getMessage());
	}
    }
        else if(SearchSpecialization.getSelectedIndex() == 1 && SearchRate.getSelectedIndex() == 2){
        try{
            String URL = "jdbc:mysql://localhost:3306/doctorquery";
            String USER = "root";
            String PASS = "password";
            DefaultTableModel model;
            model=(DefaultTableModel) SearchTable.getModel();
            model.setRowCount(0);
            Connection conns = DriverManager.getConnection(URL, USER, PASS);
       PreparedStatement statementss = conns.prepareStatement("SELECT Doctor_NAME,Specialization_Name,Sched_DayFrom,Sched_DayTo, Sched_TimeFrom, Sched_TimeTo, Rate_Pay FROM Doctor, Specialization WHERE Doctor.Specialization_ID = Specialization.Specialization_ID AND Doctor.Specialization_ID = 3 AND Rate_Pay BETWEEN 500 AND 1000");
            ResultSet results = statementss.executeQuery();
            
            while(results.next()){
                String name = results.getString(1);
                String spec = results.getString(2);
                //String rate =results.getString(4);
                String days = results.getString(3) + " - " + results.getString(4);
                String times = results.getString(5) + " - " + results.getString(6);
                String rate = results.getString(7);
            //    String rate = "??";
             //   System.out.println(name + spec + days + times + days + rate + "\n");
                doctorhome.add(new Doctor(name,spec,rate,days,times));
            } 
            for(Doctor ds:doctorhome){
            model.addRow(new Object[]{ds.docname,ds.special, ds.rate, ds.day, ds.time});  
            }
        }
        catch(SQLException sex)
	{
            System.out.println(sex.getMessage());
	}
    }
    
    else if(SearchSpecialization.getSelectedIndex() == 2 && SearchRate.getSelectedIndex() == 2){
        try{
            String URL = "jdbc:mysql://localhost:3306/doctorquery";
            String USER = "root";
            String PASS = "password";
            DefaultTableModel model;
            model=(DefaultTableModel) SearchTable.getModel();
            model.setRowCount(0);
            Connection conns = DriverManager.getConnection(URL, USER, PASS);
       PreparedStatement statementss = conns.prepareStatement("SELECT Doctor_NAME,Specialization_Name,Sched_DayFrom,Sched_DayTo, Sched_TimeFrom, Sched_TimeTo, Rate_Pay FROM Doctor, Specialization  WHERE Doctor.Specialization_ID = Specialization.Specialization_ID AND Doctor.Specialization_ID = 2 AND Rate_Pay BETWEEN 500 AND 1000");
            ResultSet results = statementss.executeQuery();
            
            while(results.next()){
                String name = results.getString(1);
                String spec = results.getString(2);
                //String rate =results.getString(4);
                String days = results.getString(3) + " - " + results.getString(4);
                String times = results.getString(5) + " - " + results.getString(6);
                String rate = results.getString(7);
               // String rate = "??";
             //   System.out.println(name + spec + days + times + days + rate + "\n");
                doctorhome.add(new Doctor(name,spec,rate,days,times));
            } 
            for(Doctor ds:doctorhome){
            model.addRow(new Object[]{ds.docname,ds.special, ds.rate, ds.day, ds.time});  
            }
        }
        catch(SQLException sex)
	{
            System.out.println(sex.getMessage());
	}
    }
    
    else if(SearchSpecialization.getSelectedIndex() == 3 && SearchRate.getSelectedIndex() == 2){
        try{
            String URL = "jdbc:mysql://localhost:3306/doctorquery";
            String USER = "root";
            String PASS = "password";
            DefaultTableModel model;
            model=(DefaultTableModel) SearchTable.getModel();
            model.setRowCount(0);
            Connection conns = DriverManager.getConnection(URL, USER, PASS);
       PreparedStatement statementss = conns.prepareStatement("SELECT Doctor_NAME,Specialization_Name,Sched_DayFrom,Sched_DayTo, Sched_TimeFrom, Sched_TimeTo, Rate_Pay FROM Doctor, Specialization  WHERE Doctor.Specialization_ID = Specialization.Specialization_ID AND Doctor.Specialization_ID = 4 AND Rate_Pay BETWEEN 500 AND 1000");
            ResultSet results = statementss.executeQuery();
            
            while(results.next()){
                String name = results.getString(1);
                String spec = results.getString(2);
                //String rate =results.getString(4);
                String days = results.getString(3) + " - " + results.getString(4);
                String times = results.getString(5) + " - " + results.getString(6);
                String rate = results.getString(7);
               // String rate = "??";
             //   System.out.println(name + spec + days + times + days + rate + "\n");
                doctorhome.add(new Doctor(name,spec,rate,days,times));
            } 
            for(Doctor ds:doctorhome){
            model.addRow(new Object[]{ds.docname,ds.special, ds.rate, ds.day, ds.time});  
            }
        }
        catch(SQLException sex)
	{
            System.out.println(sex.getMessage());
	}
    }
    
    
    else if(SearchSpecialization.getSelectedIndex() == 4 && SearchRate.getSelectedIndex() == 2){
        try{
            String URL = "jdbc:mysql://localhost:3306/doctorquery";
            String USER = "root";
            String PASS = "password";
            DefaultTableModel model;
            model=(DefaultTableModel) SearchTable.getModel();
            model.setRowCount(0);
            Connection conns = DriverManager.getConnection(URL, USER, PASS);
       PreparedStatement statementss = conns.prepareStatement("SELECT Doctor_NAME,Specialization_Name,Sched_DayFrom,Sched_DayTo, Sched_TimeFrom, Sched_TimeTo, Rate_Pay FROM Doctor, Specialization  WHERE Doctor.Specialization_ID = Specialization.Specialization_ID AND Doctor.Specialization_ID = 1 AND Rate_Pay BETWEEN 500 AND 1000;");
            ResultSet results = statementss.executeQuery();
            
            while(results.next()){
                String name = results.getString(1);
                String spec = results.getString(2);
                
                String days = results.getString(3) + " - " + results.getString(4);
                String times = results.getString(5) + " - " + results.getString(6);
                String rate = results.getString(7);
                //String rate = "??";
             //   System.out.println(name + spec + days + times + days + rate + "\n");
                doctorhome.add(new Doctor(name,spec,rate,days,times));
            } 
            for(Doctor ds:doctorhome){
            model.addRow(new Object[]{ds.docname,ds.special, ds.rate, ds.day, ds.time});  
            }
        }
        catch(SQLException sex)
	{
            System.out.println(sex.getMessage());
	}
    }
        
        // >1000
       else if(SearchSpecialization.getSelectedIndex() == 0 && SearchRate.getSelectedIndex() == 3){
        try{
            String URL = "jdbc:mysql://localhost:3306/doctorquery";
            String USER = "root";
            String PASS = "password";
            DefaultTableModel model;
            model=(DefaultTableModel) SearchTable.getModel();
            model.setRowCount(0);
            Connection conns = DriverManager.getConnection(URL, USER, PASS);
       PreparedStatement statementss = conns.prepareStatement("SELECT Doctor_NAME,Specialization_Name,Sched_DayFrom,Sched_DayTo, Sched_TimeFrom, Sched_TimeTo, Rate_Pay FROM Doctor, Specialization  WHERE Doctor.Specialization_ID = Specialization.Specialization_ID AND Rate_Pay > 1000;");
            ResultSet results = statementss.executeQuery();
            
            while(results.next()){
                String name = results.getString(1);
                String spec = results.getString(2);
                //String rate =results.getString(4);
                String days = results.getString(3) + " - " + results.getString(4);
                String times = results.getString(5) + " - " + results.getString(6);
                String rate = results.getString(7);
             //   String rate = "??";
            //    System.out.println(name + spec + days + times + days + rate + "\n");
                doctorhome.add(new Doctor(name,spec,rate,days,times));
            } 
            for(Doctor ds:doctorhome){
            model.addRow(new Object[]{ds.docname,ds.special, ds.rate, ds.day, ds.time});  
            }
        }
        catch(SQLException sex)
	{
            System.out.println(sex.getMessage());
	}
    }
        else if(SearchSpecialization.getSelectedIndex() == 1 && SearchRate.getSelectedIndex() == 3){
        try{
            String URL = "jdbc:mysql://localhost:3306/doctorquery";
            String USER = "root";
            String PASS = "password";
            DefaultTableModel model;
            model=(DefaultTableModel) SearchTable.getModel();
            model.setRowCount(0);
            Connection conns = DriverManager.getConnection(URL, USER, PASS);
       PreparedStatement statementss = conns.prepareStatement("SELECT Doctor_NAME,Specialization_Name,Sched_DayFrom,Sched_DayTo, Sched_TimeFrom, Sched_TimeTo, Rate_Pay FROM Doctor, Specialization WHERE Doctor.Specialization_ID = Specialization.Specialization_ID AND Doctor.Specialization_ID = 3 AND Rate_Pay > 1000");
            ResultSet results = statementss.executeQuery();
            
            while(results.next()){
                String name = results.getString(1);
                String spec = results.getString(2);
                //String rate =results.getString(4);
                String days = results.getString(3) + " - " + results.getString(4);
                String times = results.getString(5) + " - " + results.getString(6);
                String rate = results.getString(7);
            //    String rate = "??";
          //      System.out.println(name + spec + days + times + days + rate + "\n");
                doctorhome.add(new Doctor(name,spec,rate,days,times));
            } 
            for(Doctor ds:doctorhome){
            model.addRow(new Object[]{ds.docname,ds.special, ds.rate, ds.day, ds.time});  
            }
        }
        catch(SQLException sex)
	{
            System.out.println(sex.getMessage());
	}
    }
    
    else if(SearchSpecialization.getSelectedIndex() == 2 && SearchRate.getSelectedIndex() == 3){
        try{
            String URL = "jdbc:mysql://localhost:3306/doctorquery";
            String USER = "root";
            String PASS = "password";
            DefaultTableModel model;
            model=(DefaultTableModel) SearchTable.getModel();
            model.setRowCount(0);
            Connection conns = DriverManager.getConnection(URL, USER, PASS);
       PreparedStatement statementss = conns.prepareStatement("SELECT Doctor_NAME,Specialization_Name,Sched_DayFrom,Sched_DayTo, Sched_TimeFrom, Sched_TimeTo, Rate_Pay FROM Doctor, Specialization  WHERE Doctor.Specialization_ID = Specialization.Specialization_ID AND Doctor.Specialization_ID = 2 AND Rate_Pay > 1000");
            ResultSet results = statementss.executeQuery();
            
            while(results.next()){
                String name = results.getString(1);
                String spec = results.getString(2);
                //String rate =results.getString(4);
                String days = results.getString(3) + " - " + results.getString(4);
                String times = results.getString(5) + " - " + results.getString(6);
                String rate = results.getString(7);
               // String rate = "??";
            //    System.out.println(name + spec + days + times + days + rate + "\n");
                doctorhome.add(new Doctor(name,spec,rate,days,times));
            } 
            for(Doctor ds:doctorhome){
            model.addRow(new Object[]{ds.docname,ds.special, ds.rate, ds.day, ds.time});  
            }
        }
        catch(SQLException sex)
	{
            System.out.println(sex.getMessage());
	}
    }
    
    else if(SearchSpecialization.getSelectedIndex() == 3 && SearchRate.getSelectedIndex() == 3){
        try{
            String URL = "jdbc:mysql://localhost:3306/doctorquery";
            String USER = "root";
            String PASS = "password";
            DefaultTableModel model;
            model=(DefaultTableModel) SearchTable.getModel();
            model.setRowCount(0);
            Connection conns = DriverManager.getConnection(URL, USER, PASS);
       PreparedStatement statementss = conns.prepareStatement("SELECT Doctor_NAME,Specialization_Name,Sched_DayFrom,Sched_DayTo, Sched_TimeFrom, Sched_TimeTo, Rate_Pay FROM Doctor, Specialization  WHERE Doctor.Specialization_ID = Specialization.Specialization_ID AND Doctor.Specialization_ID = 4 AND Rate_Pay > 1000");
            ResultSet results = statementss.executeQuery();
            
            while(results.next()){
                String name = results.getString(1);
                String spec = results.getString(2);
                //String rate =results.getString(4);
                String days = results.getString(3) + " - " + results.getString(4);
                String times = results.getString(5) + " - " + results.getString(6);
                String rate = results.getString(7);
               // String rate = "??";
              //  System.out.println(name + spec + days + times + days + rate + "\n");
                doctorhome.add(new Doctor(name,spec,rate,days,times));
            } 
            for(Doctor ds:doctorhome){
            model.addRow(new Object[]{ds.docname,ds.special, ds.rate, ds.day, ds.time});  
            }
        }
        catch(SQLException sex)
	{
            System.out.println(sex.getMessage());
	}
    }
    
    
    else if(SearchSpecialization.getSelectedIndex() == 4 && SearchRate.getSelectedIndex() == 3){
        try{
            String URL = "jdbc:mysql://localhost:3306/doctorquery";
            String USER = "root";
            String PASS = "password";
            DefaultTableModel model;
            model=(DefaultTableModel) SearchTable.getModel();
            model.setRowCount(0);
            Connection conns = DriverManager.getConnection(URL, USER, PASS);
       PreparedStatement statementss = conns.prepareStatement("SELECT Doctor_NAME,Specialization_Name,Sched_DayFrom,Sched_DayTo, Sched_TimeFrom, Sched_TimeTo, Rate_Pay FROM Doctor, Specialization  WHERE Doctor.Specialization_ID = Specialization.Specialization_ID AND Doctor.Specialization_ID = 1 AND Rate_Pay > 1000;");
            ResultSet results = statementss.executeQuery();
            
            while(results.next()){
                String name = results.getString(1);
                String spec = results.getString(2);
                
                String days = results.getString(3) + " - " + results.getString(4);
                String times = results.getString(5) + " - " + results.getString(6);
                String rate = results.getString(7);
                //String rate = "??";
                System.out.println(name + spec + days + times + days + rate + "\n");
                doctorhome.add(new Doctor(name,spec,rate,days,times));
            } 
            for(Doctor ds:doctorhome){
            model.addRow(new Object[]{ds.docname,ds.special, ds.rate, ds.day, ds.time});  
            }
        }
        catch(SQLException sex)
	{
            System.out.println(sex.getMessage());
	}
    }
        
        
        
    }//GEN-LAST:event_searchsActionPerformed

    private void ConsultButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConsultButton1ActionPerformed
        // TODO add your handling code here:
        openform.setCommand(new ConsultationPage());
      // DeleteForm consult = new DeleteForm ();
      //  consult.setVisible(true);
       
        this.setVisible(false);
    }//GEN-LAST:event_ConsultButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public void showDoctorRecs(){
        ArrayList<Doctor> doctorhome =new ArrayList<Doctor>();
        
      if(SearchSpecialization.getSelectedIndex() == 0){
        try{
            String URL = "jdbc:mysql://localhost:3306/doctorquery";
            String USER = "root";
            String PASS = "password";
            DefaultTableModel model;
            model=(DefaultTableModel) SearchTable.getModel();
            model.setRowCount(0);
            Connection conns = DriverManager.getConnection(URL, USER, PASS);
       PreparedStatement statementss = conns.prepareStatement("SELECT Doctor_NAME,Specialization_Name,Sched_DayFrom,Sched_DayTo, Sched_TimeFrom, Sched_TimeTo, Rate_Pay FROM Doctor, Specialization  WHERE Doctor.Specialization_ID = Specialization.Specialization_ID;");
            ResultSet results = statementss.executeQuery();
            
            while(results.next()){
                String name = results.getString(1);
                String spec = results.getString(2);
                //String rate =results.getString(4);
                String days = results.getString(3) + " - " + results.getString(4);
                String times = results.getString(5) + " - " + results.getString(6);
                String rate = results.getString(7);
                //String rate = "??";
         
                doctorhome.add(new Doctor(name,spec,rate,days,times));
            } 
            for(Doctor ds:doctorhome){
            model.addRow(new Object[]{ds.docname,ds.special, ds.rate, ds.day, ds.time});  
            }
        }
        catch(SQLException sex)
	{
            System.out.println(sex.getMessage());
	}
    }
        
        
    
}
    public void execute(){
        this.setVisible(true);
        
       this.pack();
       this.setLocationRelativeTo(null);
       this.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
            
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HomePage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ConsultButton1;
    private javax.swing.JButton EarningsButton;
    private javax.swing.JButton LogOut;
    private javax.swing.JComboBox<String> SearchRate;
    private javax.swing.JComboBox<String> SearchSpecialization;
    private javax.swing.JTable SearchTable;
    private javax.swing.JButton addDocButton;
    private javax.swing.JButton delete;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton searchs;
    // End of variables declaration//GEN-END:variables
}
